class GoalzEvents : EventHandler
{
	override void WorldTick()
	{
		for(int i = 0; i < MAXPLAYERS; i++)
		{
			PlayerInfo plrInfo = players[i];
			if(!plrInfo || !playerInGame[i]) continue;
			if(!plrInfo.mo.FindInventory("I_GoalzData"))
				plrInfo.mo.GiveInventory("I_GoalzData", 1);
		}
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		PlayerInfo plr = players[e.Player];
		if(!plr) return;
		
		Array<String> strArgs;
		string cmd = e.Name;
		cmd.Split(strArgs, "::");
		if(strArgs.Size() <= 0) return;
		
		if(strArgs[0] == "goalz" && strArgs.Size() >= 4)
		{
			let goalData = I_GoalzData(plr.mo.FindInventory("I_GoalzData"));
			if(!goalData) return;
		
			if(strArgs[1] == "update")
			{
				string goalType = strArgs[2];
				GoalInfo goal = goalData.findGoalByType(goalType);
				if(!goal) return;
				
				if(strArgs[3] == "status")
				{
					int arg = e.Args[0];
					goalData.SendGoalUpdate(goal, arg);
				}
				
				if(strArgs[3] == "completion")
				{
					double arg = e.Args[0] / 100.;
					goalData.SendGoalUpdate(goal, updatePercent:arg);
				}
				
				if(strArgs[3] == "description" && strArgs.Size() >= 5)
				{
					string arg = strArgs[4];
					goal.description = arg;
				}
			}
		}
		
		/*
		// Example: How to handle goal updates.
		if(Goalz_StringHelper.checkGoalUpdate(e, "state"))
		{
			console.printf("Objective Completed: %s", Goalz_StringHelper.getGoalElementStr(e.Name, "Description"));
			string snd = Goalz_StringHelper.getGoalElementStr(e.Name, "CompleteSound");
			
			if(snd) plr.mo.A_StartSound(snd, CHAN_AUTO);
		}
		*/
	}
	
}